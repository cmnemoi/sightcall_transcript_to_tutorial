name: Continuous Integration (backend)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend_continuous_integration.yaml'
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          cache-dependency-glob: "uv.lock"
          enable-cache: true
          version: "0.7.13"
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "backend/.python-version"
      - name: Install dependencies
        run: uv sync --locked --no-group dev --group lint
      - name: Check code format with Ruff
        run: make check-format
      - name: Lint code with Ruff
        run: make check-lint
      - name: Check types with Mypy
        run: make check-types
  
  test:
    name: Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    env:
      GITHUB_CALLBACK_URL: ${{ secrets.GH_CALLBACK_URL }}
      GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
      GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      FRONTEND_URL: ${{ vars.FRONTEND_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}

    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          cache-dependency-glob: "uv.lock"
          enable-cache: true
          version: "0.7.13"
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "backend/.python-version"
      - name: Install dependencies
        run: uv sync --locked --no-group dev --group test
      - name: Run tests with pytest
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}